### CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: plex-config
data:
  PGID: "{{ .Values.pgid }}"
  PUID: "{{ .Values.puid }}"
  PLEX_CLAIM: {{ .Values.claim }}
---
### DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: plex
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  strategy:
    type: Recreate
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "k8s-mediaserver.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "k8s-mediaserver.selectorLabels" . | nindent 8 }}
        app: plex
    spec:
      volumes:
        {{- if not .Values.storage.customVolume }}
        - name: mediaserver-volume
          persistentVolumeClaim:
            claimName: {{ .Values.storage.pvcName }}
        {{- else }}
        - name: mediaserver-volume
          {{- toYaml .Values.storage.volumes | nindent 10 }}
        {{- end }}
        {{- if .Values.volume }}
        - name: {{ .Values.volume.name }}
          persistentVolumeClaim:
            claimName: {{ .Values.volume.name }}
        {{- end }}
      containers:
        - name: {{ .Chart.Name }}
          envFrom:
            - configMapRef:
                name: plex-config
          image: "{{ .Values.container.image }}:{{ .Values.container.tag | default .Values.image_tag }}"
          imagePullPolicy: Always
          readinessProbe:
            httpGet:
              port: {{ .Values.container.port }}
              path: "/"
            initialDelaySeconds: 20
            periodSeconds: 15
          ports:
            - name: plex-port
              containerPort: {{ .Values.container.port }}
              protocol: TCP
          volumeMounts:
          {{- if .Values.volume }}
            - name: {{ .Values.volume.name }}
              mountPath: /config
          {{- else }}
            - name: mediaserver-volume
              mountPath: /config
              subPath: "{{ .Values.storage.subPaths.config }}/plex"
          {{- end }}
            - name: mediaserver-volume
              mountPath: /movies
              subPath: "{{ .Values.storage.subPaths.movies }}"
            - name: mediaserver-volume
              mountPath: /tv
              subPath: "{{ .Values.storage.subPaths.tv }}"
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
      {{- with merge .Values.container.nodeSelector .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if eq .Values.podDistribution "cluster" }}
      affinity:
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app.kubernetes.io/instance
                  operator: In
                  values:
                  - {{ .Release.Name }}
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      {{- else if eq .Values.podDistribution "spread" }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: "ScheduleAnyway"
        labelSelector:
          matchLabels:
            app.kubernetes.io/instance: {{ .Release.Name }}
      {{- end }}
---
### SERVICE
apiVersion: v1
kind: Service
metadata:
  name: plex
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.container.port }}
      protocol: TCP
      name: plex-port
{{ if eq .Values.service.type "NodePort" }}
      nodePort: {{ .Values.service.nodePort }}
{{ end }}
  selector:
    app: plex

---
{{ if .Values.service.extraLBService }}
apiVersion: v1
kind: Service
metadata:
  name: plex-lb
  {{- with .Values.service.extraLBAnnotations }}
  annotations:
    {{- . | toYaml | nindent 4 }}
  {{- end }}
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
spec:
  type: LoadBalancer
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.container.port }}
      protocol: TCP
      name: plex-port
  selector:
    app: plex
{{ end }}
---
### INGRESS
{{ if .Values.ingress.enabled }}
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: plex
  labels:
    {{- include "k8s-mediaserver.labels" . | nindent 4 }}
  {{- with .Values.ingress.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
{{- if .Values.ingress.tls.enabled }}
  tls:
    - hosts:
        - {{ .Values_ingress_host | quote }}
      secretName: {{ .Values.ingress.tls.secretName }}
{{ end }}
  ingressClassName: {{ .Values.ingress.ingressClassName }}
  rules:
    - host: {{ .Values_ingress_host | quote }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: plex
                port:
                  number: {{ .Values.service.port }}
{{ end }}
